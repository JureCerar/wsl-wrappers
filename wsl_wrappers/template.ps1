# This file was generated by wsl-wrappers
# 
function Invoke-WSLPath {
    # Covert a path between the Windows and the WSL format
    [Alias("wslpath")]
    [OutputType()]
    Param(
        [Parameter(
            Mandatory,
            ValueFromPipeline
        )]
        [ValidateScript({
            if(-not ($_ | Test-Path -IsValid) ){
                throw "Path is not valid"
            }
            return $true
        })]
        [string[]]$Path
    )
    Begin {
        if (-not (Get-Command -Name wsl.exe -ErrorAction SilentlyContinue)) {throw "Cannot locate WSL"}
        $ArgList = [System.Collections.ArrayList]@()
        $Results = [System.Collections.Generic.List[string]]@()
    }
    Process {
        foreach ($Item in $Path) {
        $ArgList.AddRange((
            "wslpath", "-a", "-u", ([regex]::Escape($Item))
        ))
        $CPath = & wsl $ArgList 2>$null
        $Results.Add($CPath)
        $ArgList.Clear()
        }
    }
    End {
        return $Results
    }
}
# Convert arguments and invoke expression
$convertedArgs = foreach ($arg in $Args) {
    if ([System.IO.Path]::IsPathRooted($arg)) {
        Invoke-WSLPath -Path $arg
    } else {
        $arg
    }     
}
$expression = "wsl %WSL_COMMAND% " + ($convertedArgs -join " ")
Invoke-Expression $expression